/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projet.UI;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import projet.sih.CHUPP;
import projet.sih.*;

/**
 *
 * @author Tommy
 */
public class AjouterObservationUI extends javax.swing.JFrame {
    //attributs
    private DefaultComboBoxModel dcbm;
    private Patient currentPatient;
    private PersonnelMedical currentConnected;
    private ServiceCliniqueIU scUI;

    /**
     * Creates new form AjouterObservationUI
     */
    public AjouterObservationUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxConsultation = new javax.swing.JCheckBox();
        jCheckBoxHospitalisation = new javax.swing.JCheckBox();
        jComboBoxListe = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaObs = new javax.swing.JTextArea();
        jLabelObs = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonAjouterObs = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBoxConsultation.setText("   Consultation");
        jCheckBoxConsultation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxConsultationActionPerformed(evt);
            }
        });

        jCheckBoxHospitalisation.setText("    Hospitalisation");
        jCheckBoxHospitalisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHospitalisationActionPerformed(evt);
            }
        });

        jTextAreaObs.setColumns(20);
        jTextAreaObs.setRows(5);
        jScrollPane1.setViewportView(jTextAreaObs);

        jLabelObs.setText("Observation :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 153));
        jLabel2.setText("Ajouter une observation relative à une :");

        jButtonAjouterObs.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonAjouterObs.setForeground(new java.awt.Color(0, 51, 153));
        jButtonAjouterObs.setText("Ajouter l'observation");
        jButtonAjouterObs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterObsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jCheckBoxConsultation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxHospitalisation)
                .addGap(87, 87, 87))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonAjouterObs)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                        .addComponent(jLabelObs)
                        .addComponent(jScrollPane1)
                        .addComponent(jComboBoxListe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxConsultation)
                    .addComponent(jCheckBoxHospitalisation))
                .addGap(37, 37, 37)
                .addComponent(jComboBoxListe, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelObs)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButtonAjouterObs)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxConsultationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxConsultationActionPerformed
        //une seule checkbox cochée en même temps
        jCheckBoxHospitalisation.setSelected(false);
        //cas ou on ajoute une observation à une consultation
        if (jCheckBoxConsultation.isSelected()) {
            try {
                dcbm = new DefaultComboBoxModel();
                String sql = "SELECT DISTINCT * from consultation where consultation.ipp=" + currentPatient.getIPP();
                ResultSet result = CHUPP.getRequete(sql);
                result.last();
                int nbrow = result.getRow();
                System.out.println(nbrow);
                //remplissage du modèle pour la jComboBox
                if (nbrow != 0) {
                    result.beforeFirst();
                    while (result.next()) {
                        dcbm.addElement("Consultation du " + result.getDate("date") + " / " + result.getString("nature_prestation"));
                    }
                    jComboBoxListe.setModel(dcbm);
                } else {
                    dcbm.addElement("Pas de consultations pour ce patient");
                    jComboBoxListe.setModel(dcbm);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AjouterObservationUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jCheckBoxConsultationActionPerformed

    private void jCheckBoxHospitalisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHospitalisationActionPerformed
        //une seule checkbox cochée à la fois
        jCheckBoxConsultation.setSelected(false);
        //Cas ou on ajoute une observation à une hospitalisation
        if (jCheckBoxHospitalisation.isSelected()) {
            try {
                dcbm = new DefaultComboBoxModel();
                String sql = "SELECT DISTINCT * from hospitalisation where hospitalisation.ipp=" + currentPatient.getIPP();
                ResultSet result = CHUPP.getRequete(sql);
                result.last();
                int nbrow = result.getRow();
                //remplissage du modèle pour la jComboBox
                if (nbrow != 0) {
                    result.beforeFirst();
                    while (result.next()) {
                        dcbm.addElement("Hospitalisation du " + result.getDate("date") + " / " + result.getString("raison_sejour"));
                    }
                    jComboBoxListe.setModel(dcbm);
                } else {
                    dcbm.addElement("Pas d'hospitalisations pour ce patient");
                    jComboBoxListe.setModel(dcbm);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AjouterObservationUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jCheckBoxHospitalisationActionPerformed

    private void jButtonAjouterObsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterObsActionPerformed
        try {
            //ajout de l'observation
            ajouterObservations();
            scUI.getjTextArea2().setText(currentPatient.getDpi().getDm().afficherObservationsPH(currentPatient));
            scUI.revalidate();
            scUI.repaint();
            setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(AjouterObservationUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonAjouterObsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouterObs;
    private javax.swing.JCheckBox jCheckBoxConsultation;
    private javax.swing.JCheckBox jCheckBoxHospitalisation;
    private javax.swing.JComboBox jComboBoxListe;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelObs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaObs;
    // End of variables declaration//GEN-END:variables

    public void ajouterObservations() throws SQLException {
        //on récupère la date courante sous plusieurs formats
        Date dateActu = new Date(System.currentTimeMillis());
        String dateActu1 = (dateActu.getYear() + 1900) + "-" + (dateActu.getMonth() + 1) + "-" + dateActu.getDate();
        //on sélectionne dans la base de données les consultations et hospitalisations du patient concerné
        String sql = "SELECT DISTINCT * from consultation where consultation.ipp=" + currentPatient.getIPP();
        String sql2 = "SELECT DISTINCT * from hospitalisation where hospitalisation.ipp=" + currentPatient.getIPP();
        ResultSet result1 = CHUPP.getRequete(sql);
        ResultSet result2 = CHUPP.getRequete(sql2);
        //on vérifie que tous les champs nécessaires sont remplis
        if (jTextAreaObs.getText().equals("")
                || (!(jCheckBoxConsultation.isSelected()) && (!(jCheckBoxHospitalisation.isSelected())))) {
            JOptionPane j = new JOptionPane();
            j.showMessageDialog(null, "Il manque des informations relatives à l'ajout d'une observation.", "Erreur", JOptionPane.WARNING_MESSAGE);
        //on ajoute l'observation
        } else {
            String obs = jTextAreaObs.getText().replaceAll("'","''");
            //cas d'une observation relative à une consultation
            if (jCheckBoxConsultation.isSelected()) {
                while (result1.next()) {
                    if (((String) jComboBoxListe.getSelectedItem()).equals("Consultation du " + result1.getDate("date") + " / " + result1.getString("nature_prestation"))) {
                        String insert = "insert into observation values (" + Observation.getIDObs()
                                + "," + result1.getInt("idconsult")
                                + "," + currentConnected.getID()
                                + ",'" + dateActu1
                                + "','" + obs + "')";
                        CHUPP.getInsert(insert);
                        JOptionPane j = new JOptionPane();
                        j.showMessageDialog(null, "Observation bien ajoutée !", "Ajout Observation", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                }
                //cas d'une observation relative à une hospitalisation
            } else if (jCheckBoxHospitalisation.isSelected()) {
                while (result2.next()) {
                    if (((String) jComboBoxListe.getSelectedItem()).equals("Hospitalisation du " + result2.getDate("date") + " / " + result2.getString("raison_sejour"))) {
                        String insert = "insert into observation values (" + Observation.getIDObs()
                                + "," + result2.getInt("idhosp")
                                + "," + currentConnected.getID()
                                + ",'" + dateActu1
                                + "','" + obs + "')";
                        CHUPP.getInsert(insert);
                        JOptionPane j = new JOptionPane();
                        j.showMessageDialog(null, "Observation bien ajoutée !", "Ajout Observation", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                }
            //cas d'erreur
            } else {
                JOptionPane j = new JOptionPane();
                j.showMessageDialog(null, "Demande incorrecte", "Erreur", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    /**
     * @param currentPatient the currentPatient to set
     */
    public void setCurrentPatient(Patient currentPatient) {
        this.currentPatient = currentPatient;
    }

    /**
     * @param currentConnected the currentConnected to set
     */
    public void setCurrentConnected(PersonnelMedical currentConnected) {
        this.currentConnected = currentConnected;
    }

    /**
     * @param scUI the scUI to set
     */
    public void setScUI(ServiceCliniqueIU scUI) {
        this.scUI = scUI;
    }
}
